input {
  tcp {    
    port => 3333
    add_field => { "input_type" => "jao" }
  }
  file {
    path => "/var/log/logstash/auto.log"
    type => "logstash-auto"
  }
}

filter {
  if [input_type] == "jao" {  
    
    multiline {
      pattern => "^\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d "
      negate => true
      what => "previous"
    }    

    range {
      ranges => [ "message", 0, 2000, "tag:short",
                  "message", 2001, 10000, "tag:normal",
                  "message", 10001, 20000, "tag:big",
                  "message", 20001, 10000000000, "tag:reallybig" ]
    }
    
    if "reallybig" in [tags] {
      grok {
        match => ["message","(?m)(?<message>.{20000}).*"]
        overwrite => ["message"]
      }
    }
    
    grok {
     match => ["message","(?m)(?<timestamp>\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d) \[%{DATA:meta}\] \[%{DATA:mdc}\] \[%{DATA:thread}\] %{WORD:level}%{SPACE}%{DATA:logger} %{GREEDYDATA:message}"]
     overwrite => ["message"]
     tag_on_failure => ["_messagerecognitionfailed"]
    }
    
    grok {
     match => ["message","(?m)(?<message>.*)\n(?<stack_trace>^[\w\.$\-]+(?::.*?)?\n^\s+at .*)$"]
     overwrite => ["message"]
     tag_on_failure => ["_nostacktrace"]
    }
     
    date {
        locale => "en"
        match => ["timestamp", "YYYY-MM-dd HH:mm:ss"]
        timezone => "UTC"
        target => "@timestamp"       
        remove_field => "timestamp"
   }
   
   kv {
    source => "mdc"
    field_split => ", "
    remove_field => "mdc"
   }  
   
   kv {
    source => "meta"
    field_split => ", "
    remove_field => "meta"
   } 
   
   grok {      
    match => [ "message", "Processing request '.*?' from '%{IPV4:ip}'" ]
    tag_on_failure => ["_noIP"]
   }
   
   if [ip] {
     geoip {
      source => "ip"
      add_tag => [ "geoip" ]
      database => "/config-dir/GeoLiteCity.dat"
     }
    } else {
      mutate {
        remove_tag => ["_noIP"]
      }
    }    
  } 
}

output {                                       
  #stdout {  codec => "json"}                     
  elasticsearch {
    protocol => "http"
    host => "elastic"
    template => "/config-dir/logstash-mapping.json"
    template_overwrite => true
  }        
}  
